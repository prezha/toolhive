version: '3'

includes:
  operator:
    taskfile: ./cmd/thv-operator/Taskfile.yml
    flatten: true

tasks:
  docs:
    desc: Regenerate the docs
    deps: [swagger-install]
    cmds:
      - rm -rf docs/cli/*
      - go run cmd/help/main.go --dir docs/cli
      - swag init -g pkg/api/server.go --v3.1 -o docs/server

  swagger-install:
    desc: Install the swag tool for OpenAPI/Swagger generation
    cmds:
      - go install github.com/swaggo/swag/v2/cmd/swag@latest

  mock-install:
    desc: Install the mockgen tool for mock generation
    cmds:
      - go install go.uber.org/mock/mockgen@latest

  gen:
    desc: Generate mock files using go generate
    deps: [mock-install]
    cmds:
      - go generate ./...

  lint:
    desc: Run linting tools
    cmds:
      - golangci-lint run ./...
      - go vet ./...

  lint-fix:
    desc: Run linting tools, and apply fixes.
    cmds:
      - golangci-lint run --fix ./...

  test-unixlike:
    desc: Run unit tests (excluding e2e tests) on Linux and macOS
    platforms: [linux, darwin]
    internal: true
    cmds:
      - go test -v $(go list ./... | grep -v '/test/e2e')

  test-windows:
    desc: Run unit tests (excluding e2e tests) on Windows
    platforms: [windows]
    internal: true
    vars:
      DIR_LIST:
        sh: go list ./... | findstr -V "\/test\/e2e"
    cmds:
      - go test -v {{.DIR_LIST | catLines}}

  test:
    desc: Run unit tests (excluding e2e tests)
    deps: [gen]
    cmds:
      - task: test-unixlike
        platforms: [linux, darwin]
      - task: test-windows
        platforms: [windows]

  test-coverage-unixlike:
    desc: Run unit tests with coverage analysis (excluding e2e tests) on Linux and macOS
    platforms: [linux, darwin]
    internal: true
    cmds:
      - cmd: mkdir -p coverage
        platforms: [linux, darwin]
      - go test -coverprofile=coverage/coverage.out $(go list ./... | grep -v '/test/e2e')
      - go tool cover -func=coverage/coverage.out
      - echo "Generating HTML coverage report in coverage/coverage.html"
      - go tool cover -html=coverage/coverage.out -o coverage/coverage.html

  test-coverage-windows:
    desc: Run unit tests with coverage analysis (excluding e2e tests) on Windows
    platforms: [windows]
    internal: true
    vars:
      DIR_LIST:
        sh: go list ./... | findstr -V "\/test\/e2e"
    cmds:
      - cmd: cmd.exe /c mkdir coverage
        ignore_error: true   # Windows has no mkdir -p, so just ignore error if it exists
      - go test -coverprofile=coverage/coverage.out {{.DIR_LIST | catLines}}
      - go tool cover -func=coverage/coverage.out
      - echo "Generating HTML coverage report in coverage/coverage.html"
      - go tool cover -html=coverage/coverage.out -o coverage/coverage.html

  test-coverage:
    desc: Run unit tests with coverage analysis (excluding e2e tests)
    cmds:
      - task: test-coverage-unixlike
        platforms: [linux, darwin]
      - task: test-coverage-windows
        platforms: [windows]

  test-e2e-unixlike:
    desc: Run end-to-end tests on Linux and macOS
    platforms: [linux, darwin]
    internal: true
    env:
      THV_BINARY: "{{.PWD}}/bin/thv"
    cmds:
      - ./test/e2e/run_tests.sh

  test-e2e-windows:
    desc: Run end-to-end tests on Windows
    platforms: [windows]
    internal: true
    env:
      THV_BINARY: "{{.ROOT_DIR}}\\bin\\thv.exe"
    cmds:
      - cmd: .\\test\\e2e\\run_tests.bat

  test-e2e:
    desc: Run end-to-end tests
    deps: [build]
    cmds:
      - go install github.com/onsi/ginkgo/v2/ginkgo
      - task: test-e2e-unixlike
        platforms: [linux, darwin]
      - task: test-e2e-windows
        platforms: [windows]

  test-all:
    desc: Run all tests (unit and e2e)
    deps: [test, test-e2e]

  build:
    desc: Build the binary
    deps: [gen]
    vars:
      VERSION:
        sh: git describe --tags --always --dirty --match "v*" || echo "dev"
      COMMIT:
        sh: git rev-parse --short HEAD || echo "unknown"
      BUILD_DATE: '{{dateInZone "2006-01-02T15:04:05Z" (now) "UTC"}}'
    cmds:
      - cmd: mkdir -p bin
        platforms: [linux, darwin]
      - cmd: go build -ldflags "-s -w -X github.com/stacklok/toolhive/pkg/versions.Version={{.VERSION}} -X github.com/stacklok/toolhive/pkg/versions.Commit={{.COMMIT}} -X github.com/stacklok/toolhive/pkg/versions.BuildDate={{.BUILD_DATE}}" -o bin/thv ./cmd/thv
        platforms: [linux, darwin]
      - cmd: cmd.exe /c mkdir bin
        platforms: [windows]
        ignore_error: true   # Windows has no mkdir -p, so just ignore error if it exists
      - cmd: go build -ldflags "-s -w -X github.com/stacklok/toolhive/pkg/versions.Version={{.VERSION}} -X github.com/stacklok/toolhive/pkg/versions.Commit={{.COMMIT}} -X github.com/stacklok/toolhive/pkg/versions.BuildDate={{.BUILD_DATE}}" -o bin/thv.exe ./cmd/thv
        platforms: [windows]

  install:
    desc: Install the thv binary to GOPATH/bin
    vars:
      VERSION:
        sh: git describe --tags --always --dirty --match "v*" || echo "dev"
      COMMIT:
        sh: git rev-parse --short HEAD || echo "unknown"
      BUILD_DATE: '{{dateInZone "2006-01-02T15:04:05Z" (now) "UTC"}}'
    cmds:
      - go install -ldflags "-s -w -X github.com/stacklok/toolhive/pkg/versions.Version={{.VERSION}} -X github.com/stacklok/toolhive/pkg/versions.Commit={{.COMMIT}} -X github.com/stacklok/toolhive/pkg/versions.BuildDate={{.BUILD_DATE}}" -v ./cmd/thv

  all:
    desc: Run linting, tests, and build
    deps: [lint, test, build]

  all-with-coverage:
    desc: Run linting, tests with coverage, and build
    deps: [lint, test-coverage, build]

  build-image:
    desc: Build the image with ko
    env:
      KO_DOCKER_REPO: ghcr.io/stacklok/toolhive
    cmds:
      - ko build --local --bare ./cmd/thv

  build-egress-proxy:
    desc: Build the egress proxy container image
    cmds:
      - docker build --load -t ghcr.io/stacklok/toolhive/egress-proxy:local containers/egress-proxy/

  build-all-images:
    desc: Build all container images (main app and egress proxy)
    deps: [build-image, build-egress-proxy]

  # Vault Agent Injector Integration Tasks
  kind-with-vault:
    desc: Setup Kind cluster with ToolHive operator and Vault Agent Injector
    cmds:
      - task: kind-with-toolhive-operator-local
      - task: vault-install
      - task: vault-configure
      - echo "Vault Agent Injector ready"
      - echo "Login token dev-only-token"
      - echo "Run 'task vault-test' to verify setup"

  vault-install:
    desc: Install Vault with Agent Injector
    cmds:
      - helm repo add hashicorp https://helm.releases.hashicorp.com || true
      - helm repo update
      - kubectl create namespace vault --kubeconfig kconfig.yaml || true
      - |
        helm install vault hashicorp/vault \
          --namespace vault \
          --kubeconfig kconfig.yaml \
          --set "server.dev.enabled=true" \
          --set "server.dev.devRootToken=dev-only-token" \
          --set "injector.enabled=true"
      - kubectl wait --for=condition=ready pod vault-0 --namespace vault --timeout=300s --kubeconfig kconfig.yaml
      - echo "Vault installed successfully"

  vault-configure:
    desc: Configure Vault authentication and test secrets
    vars:
      VAULT_POD:
        sh: kubectl get pods --namespace vault -l app.kubernetes.io/name=vault -o jsonpath="{.items[0].metadata.name}" --kubeconfig kconfig.yaml
    cmds:
      - echo "Configuring Vault with pod {{.VAULT_POD}}"
      # Enable Kubernetes auth
      - kubectl exec --namespace vault {{.VAULT_POD}} --kubeconfig kconfig.yaml -- vault auth enable kubernetes || true
      # Configure Kubernetes auth
      - |
        kubectl exec --namespace vault {{.VAULT_POD}} --kubeconfig kconfig.yaml -- \
          vault write auth/kubernetes/config \
            kubernetes_host="https://kubernetes.default.svc:443" \
            kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
            token_reviewer_jwt=@/var/run/secrets/kubernetes.io/serviceaccount/token
      # Enable KV secrets engine
      - kubectl exec --namespace vault {{.VAULT_POD}} --kubeconfig kconfig.yaml -- vault secrets enable -path=workload-secrets kv-v2 || true
      # Create Vault policy
      - |
        kubectl exec --namespace vault {{.VAULT_POD}} --kubeconfig kconfig.yaml -- \
          sh -c 'vault policy write toolhive-workload-secrets - << EOF
        path "auth/token/lookup-self" { capabilities = ["read"] }
        path "auth/token/renew-self" { capabilities = ["update"] }
        path "workload-secrets/data/github-mcp/*" { capabilities = ["read"] }
        EOF'
      # Create Kubernetes auth role
      - |
        kubectl exec --namespace vault {{.VAULT_POD}} --kubeconfig kconfig.yaml -- \
          vault write auth/kubernetes/role/toolhive-mcp-workloads \
            bound_service_account_names="*-proxy-runner,mcp-*" \
            bound_service_account_namespaces="toolhive-system" \
            policies="toolhive-workload-secrets" \
            audience="https://kubernetes.default.svc.cluster.local" \
            ttl="1h" \
            max_ttl="4h"
      # Create test secrets
      - |
        kubectl exec --namespace vault {{.VAULT_POD}} --kubeconfig kconfig.yaml -- \
          vault kv put workload-secrets/github-mcp/config \
            token="ghp_test_token_12345" \
            organization="test-org"
      - echo "Vault configured with test secrets"


  vault-test:
    desc: Test Vault Agent Injector with sample pod
    cmds:
      - kubectl create serviceaccount mcp-test --namespace toolhive-system --kubeconfig kconfig.yaml || true
      - kubectl apply -f test/vault/simple-test-pod.yaml --kubeconfig kconfig.yaml
      - kubectl wait --for=condition=ready pod vault-simple-test-pod --namespace toolhive-system --timeout=300s --kubeconfig kconfig.yaml
      - echo "Testing Vault secret injection..."
      - kubectl exec vault-simple-test-pod --namespace toolhive-system --kubeconfig kconfig.yaml -c test-app -- cat /vault/secrets/github-config
      - kubectl delete pod vault-simple-test-pod --namespace toolhive-system --kubeconfig kconfig.yaml
      - echo "Vault Agent Injector test successful!"

  vault-destroy:
    desc: Clean up Vault installation
    cmds:
      - helm uninstall vault --namespace vault --kubeconfig kconfig.yaml || true
      - kubectl delete namespace vault --kubeconfig kconfig.yaml || true
      - rm -rf test/vault/
      - echo "Vault cleanup complete"
